  program1 :
  void main() 
{
  Map<String,String>capitals= {
    'USA': 'washington,dc',
    'France':'paris',
    'japan':'tokyo',
  };
  print("country capital Map: $capitals");
  print("capital of USA: ${capitals['USA']}");
  capitals['Germany']='berlin';
  print("after adding germany: $capitals");
  print("country capital paris:");
  for(var country in capitals.keys) {
    var capital=capitals[country];
    print("the capital of $country is $capital");
  }
  capitals.remove('France');
  print("after removing France: $capitals");
  bool hasJapan= capitals.containsKey('japan');
  print("does the map have japan as a key? $hasJapan");
}
  
  
  program 2:
  
  import 'dart:io';

void main() {
  double num1 = 10.0;
  double num2 = 5.0;
  String operator = '/';
  double? result;

  switch (operator) {
    case '+':
      result = num1 + num2;
      print('$num1 + $num2 = $result');
      break;
    case '-':
      result = num1 - num2;
      print('$num1 - $num2 = $result');
      break;
    case '*':
      result = num1 * num2;
      print('$num1 * $num2 = $result');
      break;
    case '/':
      if (num2 != 0) {
        result = num1 / num2;
        print('$num1 / $num2 = $result');
      } else {
        print('Error: Division by zero is not allowed.');
      }
      break;
    default:
      print('Error: Invalid operator "$operator". Please use +, -, *, or /.');
  }
}


program 3:

void main()
{
  int i;
  print("rollno.s");
  for(i=1;i<111;i++)
  {
    if(i==50)
      break;
    print("$i");
  }
}




void main()
{
  int i;
  print("rollno.s");
  for(i=1;i<111;i++)
  {
    if(i%2==0)
      continue;
    print("$i");
  }
}

program 4:

import 'package:flutter/material.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        // This is the theme of your application.
        //
        // TRY THIS: Try running your application with "flutter run". You'll see
        // the application has a purple toolbar. Then, without quitting the app,
        // try changing the seedColor in the colorScheme below to Colors.green
        // and then invoke "hot reload" (save your changes or press the "hot
        // reload" button in a Flutter-supported IDE, or press "r" if you used
        // the command line to start the app).
        //
        // Notice that the counter didn't reset back to zero; the application
        // state is not lost during the reload. To reset the state, use hot
        // restart instead.
        //
        // This works for code too, not just values: Most code changes can be
        // tested with just a hot reload.
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
      ),
      home: const MyHomePage(title: 'Flutter Demo Home Page'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key, required this.title});

  // This widget is the home page of your application. It is stateful, meaning
  // that it has a State object (defined below) that contains fields that affect
  // how it looks.

  // This class is the configuration for the state. It holds the values (in this
  // case the title) provided by the parent (in this case the App widget) and
  // used by the build method of the State. Fields in a Widget subclass are
  // always marked "final".

  final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  int _counter = 0;

  void _incrementCounter() {
    setState(() {
      // This call to setState tells the Flutter framework that something has
      // changed in this State, which causes it to rerun the build method below
      // so that the display can reflect the updated values. If we changed
      // _counter without calling setState(), then the build method would not be
      // called again, and so nothing would appear to happen.
      _counter++;
    });
  }

  @override
  Widget build(BuildContext context) {
    // This method is rerun every time setState is called, for instance as done
    // by the _incrementCounter method above.
    //
    // The Flutter framework has been optimized to make rerunning build methods
    // fast, so that you can just rebuild anything that needs updating rather
    // than having to individually change instances of widgets.
    return Scaffold(
      appBar: AppBar(
        // TRY THIS: Try changing the color here to a specific color (to
        // Colors.amber, perhaps?) and trigger a hot reload to see the AppBar
        // change color while the other colors stay the same.
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
        // Here we take the value from the MyHomePage object that was created by
        // the App.build method, and use it to set our appbar title.
        title: Text(widget.title),
      ),
      body: Center(
        // Center is a layout widget. It takes a single child and positions it
        // in the middle of the parent.
        child: Column(
          // Column is also a layout widget. It takes a list of children and
          // arranges them vertically. By default, it sizes itself to fit its
          // children horizontally, and tries to be as tall as its parent.
          //
          // Column has various properties to control how it sizes itself and
          // how it positions its children. Here we use mainAxisAlignment to
          // center the children vertically; the main axis here is the vertical
          // axis because Columns are vertical (the cross axis would be
          // horizontal).
          //
          // TRY THIS: Invoke "debug painting" (choose the "Toggle Debug Paint"
          // action in the IDE, or press "p" in the console), to see the
          // wireframe for each widget.
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            const Text('You have pushed the button this many times:'),
            Text(
              '$_counter',
              style: Theme.of(context).textTheme.headlineMedium,
            ),
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _incrementCounter,
        tooltip: 'Increment',
        child: const Icon(Icons.add),
      ), // This trailing comma makes auto-formatting nicer for build methods.
    );
  }
}



ASSIGNMENT DART:
first:
import 'dart:math';

String generateRandomPassword(int length) {
  const String _lowerCaseLetters = 'abcdefghijklmnopqrstuvwxyz';
  const String _upperCaseLetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  const String _numbers = '0123456789';
  const String _specialCharacters = '!@#\$%^&*()_-+=<>?';
  
  // Combine all characters
  const String _allCharacters = _lowerCaseLetters + _upperCaseLetters + _numbers + _specialCharacters;
  
  // Create a random number generator
  Random _random = Random();
  
  // Generate the password
  StringBuffer password = StringBuffer();
  for (int i = 0; i < length; i++) {
    int randomIndex = _random.nextInt(_allCharacters.length);
    password.write(_allCharacters[randomIndex]);
  }
  
  return password.toString();
}

void main() {
  // Example: Generate a 12-character password
  String password = generateRandomPassword(12);
  print(password);  // Output: Random 12-character password
}



SECOND:
int sumEvenNumbers(List<int> numbers) {
  return numbers.where((num) => num.isEven).fold(0, (sum, num) => sum + num);
}

void main() {
  // Example list
  List<int> numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
  
  // Calculate the sum of even numbers
  int sum = sumEvenNumbers(numbers);
  print(sum);  // Output: 30 (2 + 4 + 6 + 8 + 10)
}




THIRD:
class Book {
  // Attributes of the Book class
  String name;
  String author;
  double price;

  // Constructor to initialize the attributes
  Book(this.name, this.author, this.price);

  // Method to display the details of the book
  void display() {
    print('Book Name: $name');
    print('Author: $author');
    print('Price: \$${price.toStringAsFixed(2)}');
  }
}

void main() {
  // Create an instance of the Book class
  Book book1 = Book('The Great Gatsby', 'F. Scott Fitzgerald', 10.99);
  
  // Display the details of the book
  book1.display();
}


widgets:

import 'package:flutter/material.dart';
void main()
{
  runApp(Myapplication());
}
class Myapplication extends StatelessWidget{
  
  @override
Widget build(BuildContext context)   
{   
  return MaterialApp(
    home: Scaffold(  
    appBar: AppBar(  
      title: const Text('First Flutter Application'),  
    ), )) ;
}
}
body:Center{
  child :Text("this is the first app i have been building!!!thanks for understanding");
  style: TextStyle("color:Colors.black,fontsize:30.0,)")

}











